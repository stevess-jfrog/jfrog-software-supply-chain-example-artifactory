
# Author: Steves Sestari | JFrog - stevess@jfrog.com

name: Build (Dependencies Resolution) / Store Binaries / Push Build Info / Scan Binaries / Promote build from dev to prod

on: [push]

permissions:
  # This is required for requesting the OIDC token
  id-token: write
  # This is required for actions/checkout
  contents: read

env:
  # Secret created on GitHub Action repo settings containing the JPD  
  JF_URL: ${{ secrets.JF_URL }}
  # Var created on GitHub Action repo settings containing the JPD ID
  # SERVER_ID: ${{ vars.SERVER_ID }}
  # Secret created on GitHub Action repo settings containing the GPG key name
  SIG_KEY: ${{ secrets.JPD_GPG_KEY }}

jobs:
  build:
    runs-on: ubuntu-latest
    # By selecting a environment you can add approvers and decide if you want to execute an specific job 
    environment: dev
    env:
      # Variable used to control the pass/fail flow
      JFROG_BUILD_STATUS: PASS
    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v4

      - name: Set up QEMU 🏗️
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx 🐳 
        uses: docker/setup-buildx-action@v3

      - name: Setup JFrog CLI 
        uses: jfrog/setup-jfrog-cli@v4
        with:
          # Name of the OIDC provider as specified on the OIDC integration page in the JFrog Platform
          oidc-provider-name: jfrog-cli-github-actions
      # More info on this command - https://docs.jfrog-applications.jfrog.io/jfrog-applications/jfrog-cli/configurations/jfrog-platform-configuration#adding-and-editing-configured-servers  
      # - run: |
      #     jf c add $SERVER_ID --url=$JF_URL --access-token=$JF_ACCESS_TOKEN --interactive=false   
      - name: Building Docker 🐳
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: .
          build-args: UBI_VERSION=latest
          push: false
          load: true
          tags: customersuccess.jfrog.io/docker-dev-local/jfrog-software-supply-chain-example-artifactory:${{ github.run_number }}
          secret-files: |
            "npmrc=./.npmrc"
      # More info on this command - https://docs.jfrog-applications.jfrog.io/jfrog-applications/jfrog-cli/cli-for-jfrog-security/scan-your-binaries#scanning-docker-containers-on-the-local-file-system    
      - name: Xray Scan Docker image
        run: |
          jf docker scan customersuccess.jfrog.io/docker-dev-local/jfrog-software-supply-chain-example-artifactory:${{ github.run_number }}
      # More info on this command - https://docs.jfrog-applications.jfrog.io/jfrog-applications/jfrog-cli/cli-for-jfrog-artifactory/package-managers-integration#pushing-docker-images-using-the-docker-client    
      - name: Deploying Docker
        run: | 
          jfrog docker push customersuccess.jfrog.io/docker-dev-local/jfrog-software-supply-chain-example-artifactory:${{ github.run_number }} --build-name=jfrog-software-supply-chain-example-artifactory --build-number=${{ github.run_id }}
      - name: Failure check
        if: failure()
        run: |
          echo "JFROG_BUILD_STATUS=FAIL" >> $GITHUB_ENV
          export SERVER_ID_FAILURE="customersuccess_failure"
          # jf c add $SERVER_ID_FAILURE --url=$JF_URL --access-token=$JF_ACCESS_TOKEN --interactive=false   
          jf ca
      # More info on bce,bag, and bp commands - # More info on this command - https://docs.jfrog-applications.jfrog.io/jfrog-applications/jfrog-cli/cli-for-jfrog-artifactory/package-managers-integration#pushing-docker-images-using-the-docker-client 
      # https://docs.jfrog-applications.jfrog.io/jfrog-applications/jfrog-cli/cli-for-jfrog-artifactory/build-integration#collecting-information-from-git
      # https://docs.jfrog-applications.jfrog.io/jfrog-applications/jfrog-cli/cli-for-jfrog-artifactory/build-integration#publishing-build-info  
      - name: Publish Build Information
        run: |
            # jf c use $SERVER_ID
            # Collect environment variables for the build
            jf rt bce
            # Collect VCS details from git and add them to the build
            jf rt bag
            # Publish build info
            jf rt bp jfrog-software-supply-chain-example-artifactory ${{ github.run_id }}  
      # More info on this command - https://docs.jfrog-applications.jfrog.io/jfrog-applications/jfrog-cli/cli-for-jfrog-security/scan-published-builds#scanning-published-builds     
      - name: Xray Scan Build
        run: |
          jf build-scan jfrog-software-supply-chain-example-artifactory ${{ github.run_id }}    
  build-promotion-test:
    needs: build
    runs-on: ubuntu-latest
    environment: test
    steps:
      - name: Setup JFrog CLI 
        uses: jfrog/setup-jfrog-cli@v4
        with:
          # Name of the OIDC provider as specified on the OIDC integration page in the JFrog Platform
          oidc-provider-name: jfrog-cli-github-actions
      # - run: |
      #     jf c add $SERVER_ID --url=$JF_URL --access-token=$JF_ACCESS_TOKEN --interactive=false    
      # More info on how to promote the build - https://docs.jfrog-applications.jfrog.io/jfrog-applications/jfrog-cli/binaries-management-with-jfrog-artifactory/build-integration#promoting-a-build      
      - name: Promote the build to TEST env
        run: |
          jf rt bpr jfrog-software-supply-chain-example-artifactory ${{ github.run_id }} docker-test-local
  build-promotion-qa:
    needs: build-promotion-test
    runs-on: ubuntu-latest
    environment: qa
    steps:
      - name: Setup JFrog CLI 
        uses: jfrog/setup-jfrog-cli@v4
        with:
          # Name of the OIDC provider as specified on the OIDC integration page in the JFrog Platform
          oidc-provider-name: jfrog-cli-github-actions
      # - run: |
      #     jf c add $SERVER_ID_WEST --url=$JF_URL_WEST --access-token=$JF_ACCESS_TOKEN --interactive=false 
      - name: Promote the build to QA env
        run: |
          jf rt bpr jfrog-software-supply-chain-example-artifactory ${{ github.run_id }} docker-qa-local
  build-promotion-prod:
    needs: build-promotion-qa
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Setup JFrog CLI 
        uses: jfrog/setup-jfrog-cli@v4
        with:
          # Name of the OIDC provider as specified on the OIDC integration page in the JFrog Platform
          oidc-provider-name: jfrog-cli-github-actions
      # - run: |
      #     jf c add $SERVER_ID_WEST --url=$JF_URL_WEST --access-token=$JF_ACCESS_TOKEN --interactive=false 
      - name: Promote the build to QA env
        run: |
          jf rt bpr jfrog-software-supply-chain-example-artifactory ${{ github.run_id }} docker-prod-local
  rb-creation:
    needs: build-promotion-qa
    runs-on: ubuntu-latest
    steps:
      - name: Setup JFrog CLI 
        uses: jfrog/setup-jfrog-cli@v4
        with:
          # Name of the OIDC provider as specified on the OIDC integration page in the JFrog Platform
          oidc-provider-name: jfrog-cli-github-actions
      # - run: |
      #     jf c add $SERVER_ID_WEST --url=$JF_URL_WEST --access-token=$JF_ACCESS_TOKEN --interactive=false 
      - name: Create a RB from the build
        run: |
          jf rbc --build-name=jfrog-software-supply-chain-example-artifactory --build-number=${{ github.run_id }} jfrog-software-supply-chain-example-artifactory-rb 1.0.0
  rb-promotion:
    needs: rb-creation
    runs-on: ubuntu-latest
    steps:
      - name: Setup JFrog CLI 
        uses: jfrog/setup-jfrog-cli@v4
        with:
          # Name of the OIDC provider as specified on the OIDC integration page in the JFrog Platform
          oidc-provider-name: jfrog-cli-github-actions
      # - run: |
      #     jf c add $SERVER_ID_WEST --url=$JF_URL_WEST --access-token=$JF_ACCESS_TOKEN --interactive=false 
      - name: Promote the RB created on the previous step
        run: |
          jf rbp --signing-key=$SIG_KEY jfrog-software-supply-chain-example-artifactory-rb 1.0.0 PROD