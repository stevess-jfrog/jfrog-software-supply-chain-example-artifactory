name: Build (Dependencies Resolution) / Store Binaries / Push Build Info / Scan Binaries / Store and sign RB / Promote RB to test

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      JFROG_BUILD_STATUS: PASS
      JF_URL_WEST: ${{ secrets.JF_URL_WEST }}
      JF_URL_EAST: ${{ secrets.JF_URL_EAST }}
      JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}
    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v4

      - name: Set up QEMU 🏗️
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx 🐳 
        uses: docker/setup-buildx-action@v3

      - name: Setup JFrog CLI 
        uses: jfrog/setup-jfrog-cli@v4
      - run: |
          export SERVER_ID_WEST="strategicuswest"
          jf c add $SERVER_ID_WEST --url=$JF_URL_WEST --access-token=$JF_ACCESS_TOKEN --interactive=false   
          export SERVER_ID_EAST="strategicuseast"
          jf c add $SERVER_ID_EAST --url=$JF_URL_EAST --access-token=$JF_ACCESS_TOKEN --interactive=false

      - name: Building Docker 🐳
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: .
          build-args: UBI_VERSION=latest
          push: false
          load: true
          tags: strategicuswest.jfrog.io/docker-dev-local/jfrog-software-supply-chain-example-artifactory:${{ github.run_number }}
          secret-files: |
            "npmrc=./.npmrc"
            
      - name: Xray Scan Docker image
        run: |
          jf docker scan strategicuswest.jfrog.io/docker-dev-local/jfrog-software-supply-chain-example-artifactory:${{ github.run_number }}
            
      - name: Deploying Docker
        run: | 
          jfrog docker push strategicuswest.jfrog.io/docker-dev-local/jfrog-software-supply-chain-example-artifactory:${{ github.run_number }} --build-name=jfrog-software-supply-chain-example-artifactory --build-number=${{ github.run_id }}
      
      - name: Failure check
        if: failure()
        run: |
          echo "JFROG_BUILD_STATUS=FAIL" >> $GITHUB_ENV
          export SERVER_ID_FAILURE="strategicus_failure"
          jf c add $SERVER_ID_FAILURE --url=$JF_URL_WEST --access-token=$JF_ACCESS_TOKEN --interactive=false   
          jf ca

      - name: Publish Build Information
        run: |
            export SERVER_ID_WEST="strategicuswest"
            jf c use $SERVER_ID_WEST
            # Collect environment variables for the build
            jf rt bce
            # Collect VCS details from git and add them to the build
            jf rt bag
            # Publish build info
            jf rt bp jfrog-software-supply-chain-example-artifactory ${{ github.run_id }}  
            
      - name: Xray Scan Build
        run: |
          jf build-scan jfrog-software-supply-chain-example-artifactory ${{ github.run_id }}
          
      - name: Store and Sign the RB
        run: |
          curl --location 'https://strategicuswest.jfrog.io/lifecycle/api/v2/release_bundle' \
          --header 'Content-Type: application/json' \
          --header 'X-JFrog-Signing-Key-Name: ${{ secrets.JPD_GPG_KEY }}' \
          --header 'Authorization: Bearer ${{ secrets.JF_ACCESS_TOKEN }}' \
          --data '{
            "release_bundle_name": "jfrog-software-supply-chain-example-artifactory-bundle",
            "release_bundle_version": "${{ github.run_number }}",
            "source_type": "builds",
            "source": {
              "builds": [
              {
                  "build_name": "jfrog-software-supply-chain-example-artifactory",
                  "build_number": "${{ github.run_id }}",
                  "include_dependencies": true
              }
              ]
            }
          }'

      - name: Sleep for 1 minute
        run: sleep 60

      - name: Promote the RB to TEST env
        run: |
          jf rbp --signing-key=${{ secrets.JPD_GPG_KEY }} jfrog-software-supply-chain-example-artifactory-bundle ${{ github.run_number }} TEST
  


          